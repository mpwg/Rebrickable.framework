name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      
    - name: Clean DerivedData
      run: rm -rf ~/Library/Developer/Xcode/DerivedData
      
    - name: Build Release Framework (iOS)
      run: |
        xcodebuild clean build \
          -project Rebrickable.framework.xcodeproj \
          -scheme "Rebrickable.framework" \
          -destination "generic/platform=iOS" \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty
          
    - name: Build Release Framework (macOS) 
      run: |
        xcodebuild clean build \
          -project Rebrickable.framework.xcodeproj \
          -scheme "Rebrickable.framework" \
          -destination "platform=macOS" \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty
          
    - name: Run Tests
      run: |
        xcodebuild test \
          -project Rebrickable.framework.xcodeproj \
          -scheme "Rebrickable.framework" \
          -destination "platform=iOS Simulator,OS=26.0,name=iPhone 15 Pro" \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty
          
    - name: Generate Changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20)
        else
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
        fi
        
        # Save changelog to output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.TAG_NAME }}
        body: |
          ## Changes in ${{ steps.changelog.outputs.TAG_NAME }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Swift Package Manager
          Add the following to your `Package.swift`:
          
          ```swift
          dependencies: [
              .package(url: "https://github.com/mpwg/Rebrickable.framework.git", from: "${{ steps.changelog.outputs.TAG_NAME }}")
          ]
          ```
          
          ### Xcode
          1. Go to File > Add Package Dependencies
          2. Enter: `https://github.com/mpwg/Rebrickable.framework.git`
          3. Select version: `${{ steps.changelog.outputs.TAG_NAME }}`
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  update-documentation:
    name: Update Documentation
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      
    - name: Generate Documentation
      run: |
        xcodebuild docbuild \
          -project Rebrickable.framework.xcodeproj \
          -scheme "Rebrickable.framework" \
          -destination "platform=iOS Simulator,OS=26.0,name=iPhone 15 Pro" \
          -derivedDataPath ./DerivedData
          
    - name: Process Documentation Archive
      run: |
        # Find the documentation archive
        ARCHIVE_PATH=$(find ./DerivedData -name "*.doccarchive" | head -1)
        if [ -n "$ARCHIVE_PATH" ]; then
          # Convert to static website
          mkdir -p docs
          cp -R "$ARCHIVE_PATH" docs/
          echo "Documentation generated successfully"
        else
          echo "No documentation archive found"
        fi
        
    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true